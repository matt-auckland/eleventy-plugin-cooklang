"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Recipe = void 0;
const Parser_1 = require("./Parser");
class Recipe {
    constructor(source) {
        this.metadata = {};
        this.steps = [];
        this.shoppingList = {};
        this.parser = new Parser_1.Parser();
        if (source) {
            Object.assign(this, this.parser.parse(source));
        }
    }
    toCooklang() {
        let metadataStr = '';
        let stepStrs = [];
        let shoppingListStrs = [];
        for (let [key, value] of Object.entries(this.metadata)) {
            metadataStr += `>> ${key}: ${value}\n`;
        }
        for (let step of this.steps) {
            let stepStr = '';
            for (let item of step) {
                if ('value' in item) {
                    stepStr += item.value;
                }
                else {
                    if (item.type == 'ingredient')
                        stepStr += '@';
                    else if (item.type == 'cookware')
                        stepStr += '#';
                    else
                        stepStr += '~';
                    stepStr += item.name;
                    stepStr += '{';
                    if (item.quantity)
                        stepStr += item.quantity;
                    if ('units' in item && item.units)
                        stepStr += '%' + item.units;
                    stepStr += '}';
                }
            }
            stepStrs.push(stepStr);
        }
        for (let [category, items] of Object.entries(this.shoppingList)) {
            let shoppingListStr = '';
            shoppingListStr += category + '\n';
            shoppingListStr += items.map(x => x.name + (x.synonym ? '|' + x.synonym : '')).join('\n');
            shoppingListStrs.push(shoppingListStr);
        }
        return [metadataStr, stepStrs.join('\n\n'), shoppingListStrs.join('\n\n')].join('\n');
    }
    toJSON() {
        return JSON.stringify({ metadata: this.metadata, steps: this.steps });
    }
}
exports.Recipe = Recipe;
//# sourceMappingURL=Recipe.js.map